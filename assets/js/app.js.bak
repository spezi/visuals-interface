// If you want to use Phoenix channels, run `mix help phx.gen.channel`
// to get started and then uncomment the line below.
// import "./user_socket.js"

// You can include dependencies in two ways.
//
// The simplest option is to put them in assets/vendor and
// import them using relative paths:
//
//     import "../vendor/some-package.js"
//
// Alternatively, you can `npm install some-package --prefix assets` and import
// them using a path starting with the package name:
//
//     import "some-package"
//

// Include phoenix_html to handle method=PUT/DELETE in forms and buttons.
import "phoenix_html"
// Establish Phoenix Socket and LiveView configuration.
import {Socket} from "phoenix"
import {LiveSocket} from "phoenix_live_view"
import topbar from "../vendor/topbar"

import Hooks from "./hooks";

let csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content")
let liveSocket = new LiveSocket("/live", Socket, {hooks: Hooks, params: {_csrf_token: csrfToken}})

// Show progress bar on live navigation and form submits
topbar.config({barColors: {0: "#29d"}, shadowColor: "rgba(0, 0, 0, .3)"})
window.addEventListener("phx:page-loading-start", _info => topbar.show(300))
window.addEventListener("phx:page-loading-stop", _info => topbar.hide())

// connect if there are any LiveViews on the page
liveSocket.connect()

// expose liveSocket on window for web console debug logs and latency simulation:
// >> liveSocket.enableDebug()
// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session
// >> liveSocket.disableLatencySim()
window.liveSocket = liveSocket

//document.addEventListener('DOMContentLoaded', function() {
window.addEventListener("phx:select-stripe", (e) => {

    const container = document.getElementById('mapping');
    const draggable = document.getElementById('draggable');
   

    let offsetX = 0;
    let offsetY = 0;
    let isDragging = false;

    draggable.addEventListener('mousedown', function(event) {
        isDragging = true;
        offsetX = event.clientX - draggable.getBoundingClientRect().left;
        offsetY = event.clientY - draggable.getBoundingClientRect().top;
    });

    document.addEventListener('mousemove', function(event) {
        if (isDragging) {
            const containerRect = container.getBoundingClientRect();
            let newX = event.clientX - containerRect.left - offsetX;
            let newY = event.clientY - containerRect.top - offsetY;
            console.log(newX)
            // Constrain the draggable element within the container
            newX = Math.max(0, Math.min(container.clientWidth - draggable.clientWidth, newX));
            newY = Math.max(0, Math.min(container.clientHeight - draggable.clientHeight, newY));

            draggable.style.left = newX + 'px';
            draggable.style.top = newY + 'px';
        }
    });

    document.addEventListener('mouseup', function() {
        isDragging = false;
    });

    container.addEventListener('mousedown', function(event) {
        //console.log(event)
        const vertex = document.createElement('div'); 
        let offsetX = event.offsetX
        let offsetY = event.offsetY
        vertex.style.top = event.offsetY
        vertex.style.right = event.offsetX
        vertex.className = "draggable"
        container.appendChild(vertex);
    });

    function get_points() {
        const container = document.getElementById('mapping');
        var draggable = document.getElementsByClassName('draggable')
    }
    console.log(get_points())
});


